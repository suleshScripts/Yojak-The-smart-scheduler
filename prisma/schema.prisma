// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ClassType {
  LECTURE
  LAB
  TUTORIAL
}

enum HolidayType {
  NATIONAL
  STATE
  EMERGENCY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  name                String?
  image               String?
  emailVerified       DateTime?
  role                UserRole          @default(STUDENT)
  verificationStatus  VerificationStatus @default(PENDING)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Faculty specific fields
  facultyProfile      FacultyProfile?
  
  // Student specific fields
  studentProfile      StudentProfile?
  
  // Relations
  createdTimetableEntries TimetableEntry[]
  accounts            Account[]
  sessions            Session[]
  
  @@map("users")
}

model FacultyProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  enrollmentId        String?
  teacherId           String?
  aadhaarNumber       String?
  departmentId        String
  maxWeeklyHours      Int      @default(40)
  currentWeeklyHours  Int      @default(0)
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department          Department @relation(fields: [departmentId], references: [id])
  subjects            SubjectFaculty[]
  timetableEntries    TimetableEntry[]
  attendanceRecords   Attendance[]
  nepCompliance       NEPCompliance[]
  syllabusProgress    SyllabusProgress[]
  
  @@map("faculty_profiles")
}

model StudentProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  enrollmentId String?
  departmentId String
  semester     Int
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id])
  
  @@map("student_profiles")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  
  faculty     FacultyProfile[]
  students    StudentProfile[]
  subjects    Subject[]
  classrooms  Classroom[]
  
  @@map("departments")
}

model Subject {
  id                String   @id @default(cuid())
  name              String
  code              String   @unique
  departmentId      String
  weeklyHours       Int      @default(3)
  totalHours        Int
  completedHours    Int      @default(0)
  semester          Int
  isLab             Boolean  @default(false)
  
  department        Department @relation(fields: [departmentId], references: [id])
  faculty           SubjectFaculty[]
  timetableEntries  TimetableEntry[]
  syllabusProgress  SyllabusProgress[]
  
  @@map("subjects")
}

model SubjectFaculty {
  id         String   @id @default(cuid())
  subjectId  String
  facultyId  String
  
  subject    Subject  @relation(fields: [subjectId], references: [id])
  faculty    FacultyProfile @relation(fields: [facultyId], references: [id])
  
  @@unique([subjectId, facultyId])
  @@map("subject_faculty")
}

model Classroom {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  capacity    Int
  isLab       Boolean  @default(false)
  departmentId String?
  
  department  Department? @relation(fields: [departmentId], references: [id])
  timetableEntries TimetableEntry[]
  
  @@map("classrooms")
}

model TimetableEntry {
  id          String   @id @default(cuid())
  subjectId   String
  facultyId   String
  classroomId String
  dayOfWeek   Int      // 0-6 (Monday-Sunday)
  startTime   DateTime
  endTime     DateTime
  classType   ClassType @default(LECTURE)
  isRescheduled Boolean @default(false)
  originalId  String?  // For rescheduled classes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject     Subject  @relation(fields: [subjectId], references: [id])
  faculty     FacultyProfile @relation(fields: [facultyId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  
  @@map("timetable_entries")
}

model Holiday {
  id          String     @id @default(cuid())
  name        String
  date        DateTime
  type        HolidayType
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  
  @@map("holidays")
}

model Attendance {
  id          String           @id @default(cuid())
  facultyId   String
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  
  faculty     FacultyProfile  @relation(fields: [facultyId], references: [id])
  
  @@unique([facultyId, date])
  @@map("attendance")
}

model NEPCompliance {
  id                        String   @id @default(cuid())
  facultyId                 String
  week                      DateTime
  teachingHours             Int
  nonTeachingHours          Int
  studentInteractionHours   Int
  totalHours                Int
  maxAllowedHours           Int      @default(40)
  isCompliant               Boolean  @default(true)
  notes                     String?
  
  faculty                   FacultyProfile @relation(fields: [facultyId], references: [id])
  
  @@unique([facultyId, week])
  @@map("nep_compliance")
}

model SyllabusProgress {
  id          String   @id @default(cuid())
  facultyId   String
  subjectId   String
  coveredPercent Int   @default(0)
  remarks     String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  faculty     FacultyProfile @relation(fields: [facultyId], references: [id])
  subject     Subject        @relation(fields: [subjectId], references: [id])

  @@unique([facultyId, subjectId])
  @@map("syllabus_progress")
}

// NextAuth.js Prisma Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}